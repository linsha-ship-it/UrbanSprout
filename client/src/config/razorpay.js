// Razorpay Configuration
export const RAZORPAY_CONFIG = {
  key_id: 'rzp_test_RH9Kx0Ibt9neI6', // Your Razorpay Key ID
  currency: 'INR',
  name: 'UrbanSprout',
  description: 'Urban Gardening Store',
  image: '/vite.svg', // You can replace this with your logo
  theme: {
    color: '#10B981' // Green theme to match your app
  }
}

// Initialize Razorpay payment
export const initializeRazorpayPayment = (orderData, onSuccess, onError) => {
  // Check if Razorpay is loaded
  if (!window.Razorpay) {
    console.error('Razorpay script not loaded');
    onError('Razorpay payment gateway not available. Please refresh the page and try again.');
    return;
  }

  // Validate required order data
  if (!orderData.razorpayOrderId) {
    console.error('Missing Razorpay order ID');
    onError('Payment order not created properly. Please try again.');
    return;
  }

  if (!orderData.amount || orderData.amount <= 0) {
    console.error('Invalid payment amount:', orderData.amount);
    onError('Invalid payment amount. Please try again.');
    return;
  }

  console.log('Initializing Razorpay with options:', {
    key: RAZORPAY_CONFIG.key_id,
    amount: orderData.amount * 100,
    currency: RAZORPAY_CONFIG.currency,
    order_id: orderData.razorpayOrderId
  });

  // Validate customer data (make it optional with defaults)
  if (!orderData.customerName) {
    console.warn('Customer name not provided, using default');
    orderData.customerName = 'Customer';
  }
  if (!orderData.customerEmail) {
    console.warn('Customer email not provided, using default');
    orderData.customerEmail = 'customer@example.com';
  }

  const options = {
    key: RAZORPAY_CONFIG.key_id,
    amount: orderData.amount * 100, // Razorpay expects amount in paise
    currency: RAZORPAY_CONFIG.currency,
    name: RAZORPAY_CONFIG.name,
    description: `${RAZORPAY_CONFIG.description} - Order #${orderData.orderId}`,
    image: RAZORPAY_CONFIG.image,
    order_id: orderData.razorpayOrderId, // This will be generated by your backend
    handler: function (response) {
      // Payment successful
      console.log('Razorpay payment success:', response);
      onSuccess(response)
    },
    prefill: {
      name: orderData.customerName || 'Customer',
      email: orderData.customerEmail || 'customer@example.com',
      contact: orderData.customerPhone || '9999999999'
    },
    notes: {
      address: orderData.shippingAddress,
      order_id: orderData.orderId
    },
    theme: RAZORPAY_CONFIG.theme,
    modal: {
      ondismiss: function() {
        // Payment modal dismissed
        console.log('Razorpay modal dismissed');
        onError('Payment cancelled by user')
      }
    },
    retry: {
      enabled: true,
      max_count: 3
    },
    callback_url: window.location.origin + '/payment-success'
  }

  try {
    console.log('Creating Razorpay instance with options:', options);
    const rzp = new window.Razorpay(options)
    
    rzp.on('payment.failed', function (response) {
      console.error('Payment failed:', response.error);
      onError(`Payment failed: ${response.error.description || 'Unknown error'}`);
    });
    
    console.log('Opening Razorpay modal...');
    rzp.open()
    console.log('Razorpay modal opened successfully');
    
    return rzp
  } catch (error) {
    console.error('Error creating Razorpay instance:', error);
    onError('Failed to initialize payment gateway. Please try again.');
  }
}
